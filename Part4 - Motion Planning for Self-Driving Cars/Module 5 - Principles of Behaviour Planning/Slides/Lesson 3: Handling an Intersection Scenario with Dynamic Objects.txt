Welcome to the third video this week on behavior planning. In the last video, we developed a basic
behavior planner using a finite state machine for a four-way intersection
without traffic. We now focus on incorporating traffic interactions in
the same four-way intersection. In today's lesson, we will
begin by reviewing some of the interactions with
the dynamic object covered in previous modules, which we use throughout
this lesson to safely interact with the other objects
in the environment. We will then extend the state machine
that we had built in the previous lesson to include these interactions
with other vehicles. Finally, we will briefly
discuss the many edge cases and various complexities
that occur when dealing with dynamic
objects. Let's dive in. Once again, the scenario
we study in this video is a single lane four-way
stop intersection. We would like to be
able to travel in any possible direction
through this intersection, while now handling interaction
with other vehicles. Recall that in
the previous lesson, we broke up the intersection
into three areas or zones. The approaching zone
highlighted in red, represents when a vehicle should decelerate to stop
at the intersection. The ad zone highlighted in green, is where the vehicle should stop prior to entering
the intersection. The on zone in orange, which represents
the intersection itself. The zone's size can be shifted based on the ego and
dynamic velocities, as well as the size
of the intersection. Throughout this
lesson, we will be focusing on the interactions with other dynamic objects,
specifically other vehicles. In order to be able to safely
deal with these vehicles, one important aspect
is a measurement of the distance to
various interaction points with the other objects. The first distance
measure to consider, is the distance to
dynamic objects. This is defined as
the Euclidean distance between the current ego position to the center of any dynamic object
in the environment. The second is the distance
to collision point, which is the distance to a potential collision point
with another dynamic object. Finally, the time to collision is the time it would take to reach the given collision point. Our approach to
calculating this was discussed in the previous video. Now let's expand a finite
state machine to accommodate the added complexity
of the dynamic objects. We will need to increase the required maneuvers
to four in order to correctly handle all interactions with vehicles in this scenario. First, let's review
the maneuvers we included in our first version of the finite state machine. These were: track speed, who's only constraint
is the speed of the given road,
decelerate to stop, which requires the ego vehicle
to decelerate to a stop point at a specific
location in the environment, and stop, where we remained
in the stop position. The new maneuver we need
to add is follow leader. This maneuver state requires
the ego vehicle to follow the speed of and maintain a safe distance
to a lead vehicle, which is any vehicle directly
in front of it in its lane. The safe distance is speed dependent and both safe speed and safe distance are updated as entry actions on every iteration
of the behavior planner. Now that we have all
of the states defined for our expanded finite
state machine, we turn to populating
the transitions. We will do this in
a similar fashion to the previous lesson, starting at a given state
and then identifying all of the transitions out of that state before
proceeding to the next. We'll display progress through the intersection as we define transitions in
a pictorial representation of the scenario seen
here on the left, and we'll build up the finite
state machine on the right. In each pictorial representation, the autonomous ego vehicle will be denoted by a red arrow. We will then start as we did in the previous lesson
with the ego vehicle being located outside
the intersection in the track speeds state. Much as we've seen in
the previous lesson, the ego vehicle will only move to the decelerate to stop state once in
the approaching zone. However, there is
an additional concern, the situation in which
another vehicle appears or enters the lane in
front of the ego vehicle. In this case, we will
move to attempt to follow the vehicle by
performing a follow check. The follow check can be
decomposed into two elements. A distance check and
a same lane check. The distance check confirms
that the vehicle is close enough such that
it should be followed. In the same lane
check confirms that the vehicle is actually in the same lane as the ego vehicle. In this case, we can use
distance to dynamic object, which is the Euclidean
distance to the object and compare
that to a threshold. There are several methods
which can be employed to check if the vehicle is in the same lane as the ego vehicle. However for simplicity,
we will check if the lead vehicle is
within the lane limits and if the heading of the dynamic object is
within a given threshold to that of the ego vehicle indicating it is moving
in the same direction. In the follow leaders state, we define only two transitions. First, the lead vehicle
might exit the lean before the ego vehicle is approaching or at
the intersection, resulting in a switch to
the track speed state. Or the lead vehicle drives out of
the current lane, usually, onto the intersection
when the ego vehicle is already in the at
or approaching zones, resulting in a direct transition to the decelerate to stop state. We add the transition condition, that the distance to collision is greater than the distance to the stop point when
the ego vehicle is either in the approach
or add zones. In this situation,
the ego vehicles should transition
to decelerate to stop and set the stop point to the correct location at the stop line of
the intersection. As before, in the decelerate
to stop state, the ego vehicle
continues decelerating until the time when it comes
to a stop at the stop line. Which will result in a switch to the stop state as seen
in our previous lesson. However, we once again have
to take into account that a vehicle is able to pull in front of the autonomous car
at an intersection, either from a driveway or
an overtaking maneuver. Much as before, we perform the follow check throughout
the decelerate to stop state when the ego vehicle is in the approaching
or add zones, and transition to follow leader if the check returns true. In this case however, the distance check
considers whether the lead vehicle distance to collision is less than
the stop point distance, so that the leader
following modes should take precedence. Finally, to complete
our expansion of the finite state machine, let's look at the situations
we can face once stopped. To keep things
simple, we'll assume a very conservative
driving style, where our autonomous
car waits until all vehicles have
cleared the approaching, at, or on intersections zones before proceeding through it. We leave the implementation
of precedents at the stop sign for you
to explore on your own. Further, we'll
define simple checks for a rectilinear intersections, that identify all vehicles
direction of travel with four easy labels and only consider other vehicles moving straight through
the intersection. Relative to the ego
vehicles body frame, a vehicle object with
a relative heading of between minus 45 and 45 degrees, will be labeled as going in the same direction
as the ego vehicle. A vehicle between minus 45 and 135 degrees relative heading, will be labeled as
heading to the right. Between minus 135 and 135 as heading towards
the ego vehicle and finally, between 45-135 degrees
relative heading, will be labeled as
going to the left. This simplification
can be improved using predicted paths for
the dynamic objects, especially if additional
perception information is available to improve prediction of the direction of travel
through the intersection. We can now define the transitions
out of the stop state. Will have two sets
of transitions. Either follow leader
or track speed, depending on whether
a vehicle is present within the lane through the intersection that satisfies the follow check. In each case, the transition
conditions change based on the path through the intersection required
by our mission plan. When the ego vehicle
needs to turn left, any vehicle approaching
from the left, right, or any oncoming vehicle, must clear the on intersection zone before
the ego vehicle can proceed. When the ego vehicle
needs to go straight, only vehicles approaching
from the left or right, need to clear the intersection. Finally, when the ego vehicle
needs to turn right, only vehicles approaching from the left need to clear
the intersection. From this simple definition of the transitions out
of the stop state, we hope you can visualize the additional checks needed to handle the precedence due to arrival order at
an intersection and the possibility that
the other vehicles might also turn left or right. The resulting full state machine includes the following states
and transitions. While this state machine
is unable to be used on a real autonomous vehicle due to the oversimplifications
we relied on, it serves as a good demonstration of the process of converting a given operational design domain into a functional
finite state machine. You're now ready
to start tackling more complex scenarios with more complete dynamic
object models. So far throughout the creation
of a state machine, we have made one particularly
strong assumption about how dynamic objects behave. Namely, that all dynamic objects obey the rules of the road. However, this is not
always the case, and this difficulty leads to many edge cases that also
need to be considered. Let's quickly discuss
a few examples of what can go wrong with
this strong assumption. The first example
would be when a driver unintentionally swerves
into oncoming traffic, entering the lane
of the ego vehicle. This actually happened
to a Waymo van in 2018, when a driver careened over a median into oncoming traffic. Another example, is of an aggressive driver
racing through an intersection even as the ego vehicle has begun
driving through it. Another common example, is when a vehicle fails to stop
at the intersection. Finally, I will end with
the case of a vehicle which is parked in close
proximity to the intersection. If this vehicle is
not tagged as parked, so that it might be treated as a static instead
of dynamic object, our behavior planner
may get stuck in a deadlock state waiting for
this parked vehicle to move. This is by no means a complete
set of all possibilities, and one of the
primary objectives of behaviors safety
assessment and testing, is to uncover as many variations of unexpected behaviors
as possible, so that they also
can be detected, categorized, and
incorporated into the behavior planning
design process. Just simply uncovering edge
cases is not enough, however. Rather we must define how the autonomous vehicles should react to every one
of these cases. For this emergency maneuvers such as a swerve or
a hard break are required, with many more transitions
and conditions to define. This is an active area of research and
development and we've included some
additional resources in the supplemental materials, if you'd like to find out more. In summary, in today's video, we learned how we can create
a finite state machine, able to interact with dynamic objects which follow
the rules of the road. We saw why dealing with dynamic objects is
so challenging by looking at just a few of the many possible edge cases
which they can create. In our next lesson, we will see how we can continue building our behavior planner to be able to handle multiple
scenarios simultaneously. We'll see you next time.