WEBVTT

1
00:00:14.150 --> 00:00:16.805
Hi everyone. In this lesson,

2
00:00:16.805 --> 00:00:18.850
we'll use the
optimization techniques

3
00:00:18.850 --> 00:00:21.015
we've developed in
the previous lessons,

4
00:00:21.015 --> 00:00:23.455
to derive a full-fledged
path planner

5
00:00:23.455 --> 00:00:26.170
known as the conformal
lattice planner.

6
00:00:26.170 --> 00:00:28.210
By the end of this video,

7
00:00:28.210 --> 00:00:29.755
you should be able to implement

8
00:00:29.755 --> 00:00:31.270
a conformal lattice planner,

9
00:00:31.270 --> 00:00:33.505
to solve our path
planning problem.

10
00:00:33.505 --> 00:00:35.110
You should understand how to

11
00:00:35.110 --> 00:00:36.970
sample points along the road,

12
00:00:36.970 --> 00:00:39.640
and how to plan paths
to each point using

13
00:00:39.640 --> 00:00:43.190
the optimization formulation
we developed in lesson two.

14
00:00:43.190 --> 00:00:44.990
You should also be able to

15
00:00:44.990 --> 00:00:47.465
determine if paths
are collision free,

16
00:00:47.465 --> 00:00:49.790
and select the path
that best tracks

17
00:00:49.790 --> 00:00:53.470
the road we need to
follow. Let's get started.

18
00:00:53.470 --> 00:00:56.030
As an introduction, let's go over

19
00:00:56.030 --> 00:00:57.440
the high level objective and

20
00:00:57.440 --> 00:01:00.065
structure of the conformal
lattice planner.

21
00:01:00.065 --> 00:01:01.880
As with all path planners,

22
00:01:01.880 --> 00:01:03.050
the goal is to plan

23
00:01:03.050 --> 00:01:05.090
a feasible collision-free path

24
00:01:05.090 --> 00:01:07.610
from the autonomous cars
current position,

25
00:01:07.610 --> 00:01:09.335
to a given goal state.

26
00:01:09.335 --> 00:01:11.225
The conformal lattice planner

27
00:01:11.225 --> 00:01:14.240
exploits the structured
nature of roads,

28
00:01:14.240 --> 00:01:15.950
to speed up the planning process

29
00:01:15.950 --> 00:01:17.555
while avoiding obstacles.

30
00:01:17.555 --> 00:01:21.140
By focusing on only those
smooth path options

31
00:01:21.140 --> 00:01:22.520
that swerve slightly to

32
00:01:22.520 --> 00:01:24.620
the left or right
of the goal path,

33
00:01:24.620 --> 00:01:26.840
the conformal lattice
planner produces

34
00:01:26.840 --> 00:01:29.905
plans that closely
resemble human driving.

35
00:01:29.905 --> 00:01:32.619
When planning paths
over roadways,

36
00:01:32.619 --> 00:01:35.810
a car should typically never
consider leaving the road,

37
00:01:35.810 --> 00:01:38.405
unless there is
an emergency stop scenario.

38
00:01:38.405 --> 00:01:41.690
Because of this, the conformal
lattice planner chooses

39
00:01:41.690 --> 00:01:43.940
a central goal state as well

40
00:01:43.940 --> 00:01:46.580
as a sequence of
alternate goal states,

41
00:01:46.580 --> 00:01:48.050
that are formed by laterally

42
00:01:48.050 --> 00:01:50.419
offsetting from
the central goal state,

43
00:01:50.419 --> 00:01:52.685
with respect to the
heading of the road.

44
00:01:52.685 --> 00:01:54.830
This is illustrated here in

45
00:01:54.830 --> 00:01:57.170
this example of
a conformal lattice.

46
00:01:57.170 --> 00:01:59.390
Where the end point
of each path is

47
00:01:59.390 --> 00:02:01.910
laterally offset from
the central path,

48
00:02:01.910 --> 00:02:04.475
which corresponds to
a goal point on the road.

49
00:02:04.475 --> 00:02:07.820
This goal point is
highlighted in gold.

50
00:02:07.820 --> 00:02:10.300
We can do this
because in general,

51
00:02:10.300 --> 00:02:11.540
the car is supposed to make

52
00:02:11.540 --> 00:02:13.970
forward progress
along the ego lane.

53
00:02:13.970 --> 00:02:15.910
We don't care as much
about a path that

54
00:02:15.910 --> 00:02:17.944
wouldn't result in
forward progress,

55
00:02:17.944 --> 00:02:20.485
so we can greatly
reduce our search space

56
00:02:20.485 --> 00:02:22.040
keeping the conformal lattice

57
00:02:22.040 --> 00:02:24.245
planner computationally
tractable.

58
00:02:24.245 --> 00:02:26.825
So how do we select
this goal state?

59
00:02:26.825 --> 00:02:29.030
In general, there's
a key trade off when

60
00:02:29.030 --> 00:02:31.355
selecting your goal state
for path planning.

61
00:02:31.355 --> 00:02:33.380
If you choose
a goal state that is

62
00:02:33.380 --> 00:02:35.675
close to the current
ego vehicle position,

63
00:02:35.675 --> 00:02:37.610
you reduce the computational time

64
00:02:37.610 --> 00:02:40.465
required to find a path
to the goal point.

65
00:02:40.465 --> 00:02:42.980
However, you also
reduce the ability of

66
00:02:42.980 --> 00:02:45.800
the planner to avoid obstacles
farther down a path,

67
00:02:45.800 --> 00:02:47.660
in a smooth and
comfortable manner.

68
00:02:47.660 --> 00:02:50.750
This can be problematic at
higher speeds where the car

69
00:02:50.750 --> 00:02:54.010
will cover more distance in
between planning cycles.

70
00:02:54.010 --> 00:02:56.720
Usually, the goal
horizon that we use

71
00:02:56.720 --> 00:02:59.180
in our plan is
dynamically calculated,

72
00:02:59.180 --> 00:03:00.770
based upon factors such as

73
00:03:00.770 --> 00:03:03.245
the car speed and
the weather conditions.

74
00:03:03.245 --> 00:03:05.450
For simplicity in
this module however,

75
00:03:05.450 --> 00:03:07.400
we will use a fixed goal horizon.

76
00:03:07.400 --> 00:03:09.170
We will take the goal point as

77
00:03:09.170 --> 00:03:11.720
the point along
the center line of the lane,

78
00:03:11.720 --> 00:03:15.395
that is a distance ahead of
us equal to our goal horizon.

79
00:03:15.395 --> 00:03:18.350
This is illustrated here
along this path with

80
00:03:18.350 --> 00:03:20.300
the gold point corresponding

81
00:03:20.300 --> 00:03:22.510
to the selected goal location.

82
00:03:22.510 --> 00:03:24.500
The blue points correspond to

83
00:03:24.500 --> 00:03:26.660
the laterally offset goal points,

84
00:03:26.660 --> 00:03:27.845
which will be used as

85
00:03:27.845 --> 00:03:29.795
alternate endpoint
constraints for

86
00:03:29.795 --> 00:03:32.030
each spiral in the lattice.

87
00:03:32.030 --> 00:03:34.835
The black portion of
the lane central line has

88
00:03:34.835 --> 00:03:37.775
arc length equal to
our selected goal horizon.

89
00:03:37.775 --> 00:03:39.350
At each planning step,

90
00:03:39.350 --> 00:03:41.225
we will recompute our goal point

91
00:03:41.225 --> 00:03:43.130
based on this same horizon,

92
00:03:43.130 --> 00:03:45.995
and we will make forward
progress along the lane.

93
00:03:45.995 --> 00:03:48.890
Once these goals states
have been found,

94
00:03:48.890 --> 00:03:50.149
we can then calculate

95
00:03:50.149 --> 00:03:52.895
the spirals required to
reach each one of them.

96
00:03:52.895 --> 00:03:55.010
At this point, we
don't worry about

97
00:03:55.010 --> 00:03:56.780
whether the paths
are collision free,

98
00:03:56.780 --> 00:03:59.450
we just want kinematically
feasible paths

99
00:03:59.450 --> 00:04:01.525
to each of our goal states.

100
00:04:01.525 --> 00:04:02.990
We can therefore use

101
00:04:02.990 --> 00:04:06.155
the optimization formulation
we developed in lesson two,

102
00:04:06.155 --> 00:04:08.225
to solve for a cubic spiral,

103
00:04:08.225 --> 00:04:09.785
from our current location,

104
00:04:09.785 --> 00:04:11.780
to each end location.

105
00:04:11.780 --> 00:04:14.510
If any of the spirals
are kinematically

106
00:04:14.510 --> 00:04:16.370
infeasible or are unable

107
00:04:16.370 --> 00:04:18.050
to reach the required goal state,

108
00:04:18.050 --> 00:04:20.300
we discard those spiral
so that they are

109
00:04:20.300 --> 00:04:23.300
no longer considered
as potential paths.

110
00:04:23.300 --> 00:04:26.360
Note that once an optimization
problem is solved,

111
00:04:26.360 --> 00:04:27.890
we only have the resulting

112
00:04:27.890 --> 00:04:30.470
parameter vector p. We then have

113
00:04:30.470 --> 00:04:32.630
to undo the transformation
we initially

114
00:04:32.630 --> 00:04:35.000
performed on the spiral
coefficients,

115
00:04:35.000 --> 00:04:37.970
in order to retrieve
them from the p vector.

116
00:04:37.970 --> 00:04:40.625
Once we have
our spiral coefficients,

117
00:04:40.625 --> 00:04:43.480
we can then sample
the points along the spiral

118
00:04:43.480 --> 00:04:47.540
to get a discrete representation
of the entire path.

119
00:04:47.540 --> 00:04:49.370
Since we don't have

120
00:04:49.370 --> 00:04:52.455
a closed form solution of
the position along the spiral,

121
00:04:52.455 --> 00:04:55.550
we again need to perform
numerical integration.

122
00:04:55.550 --> 00:04:57.350
However, since this time,

123
00:04:57.350 --> 00:04:59.900
we are evaluating
the integral and numerous points

124
00:04:59.900 --> 00:05:01.550
along the entire spiral,

125
00:05:01.550 --> 00:05:03.080
a more efficient method is

126
00:05:03.080 --> 00:05:05.300
needed to solve these integrals.

127
00:05:05.300 --> 00:05:08.585
Here we apply a linear
interpolation approach.

128
00:05:08.585 --> 00:05:10.040
The trapezoid rule.

129
00:05:10.040 --> 00:05:12.320
The trapezoid rule is
significantly more

130
00:05:12.320 --> 00:05:14.930
efficient than Simpson's rule
in this context,

131
00:05:14.930 --> 00:05:17.780
because each subsequent point
along the curve,

132
00:05:17.780 --> 00:05:19.970
can be constructed
from the previous one.

133
00:05:19.970 --> 00:05:22.460
So we only have to
do one sweep through

134
00:05:22.460 --> 00:05:25.205
the spiral to get all
of the required points.

135
00:05:25.205 --> 00:05:27.005
Simpson's rule, on
the other hand,

136
00:05:27.005 --> 00:05:28.280
would require us to solve

137
00:05:28.280 --> 00:05:30.830
an integral approximation
for each point,

138
00:05:30.830 --> 00:05:32.830
which is much less efficient.

139
00:05:32.830 --> 00:05:35.150
In Python, we can
do this by using

140
00:05:35.150 --> 00:05:37.610
the cumulative
trapezoid function.

141
00:05:37.610 --> 00:05:40.100
Once the trapezoid
rule is applied,

142
00:05:40.100 --> 00:05:42.500
we now have a discrete
representation

143
00:05:42.500 --> 00:05:45.425
of each spiral for
each goal point.

144
00:05:45.425 --> 00:05:48.680
It will be important that we
keep track of the curvature

145
00:05:48.680 --> 00:05:51.620
of each point along with
the position and heading,

146
00:05:51.620 --> 00:05:52.730
as this will help us with

147
00:05:52.730 --> 00:05:55.150
our velocity profile
planning later on.

148
00:05:55.150 --> 00:05:57.140
We have closed form solutions

149
00:05:57.140 --> 00:05:58.520
for the curvature and heading,

150
00:05:58.520 --> 00:06:01.370
so no numerical
integration is required.

151
00:06:01.370 --> 00:06:03.485
After using the trapezoid rule,

152
00:06:03.485 --> 00:06:05.390
we now have our generated set of

153
00:06:05.390 --> 00:06:08.110
paths for each goal
states shown here.

154
00:06:08.110 --> 00:06:10.230
Now that we have
a full set of paths,

155
00:06:10.230 --> 00:06:13.160
we need to see which ones
are collision free.

156
00:06:13.160 --> 00:06:15.530
To do this, we can use either of

157
00:06:15.530 --> 00:06:16.820
the collision checking techniques

158
00:06:16.820 --> 00:06:18.620
we discussed in module four.

159
00:06:18.620 --> 00:06:22.310
Most generally, we can use
a binary occupancy grid that

160
00:06:22.310 --> 00:06:26.735
contains one if a cell is
occupied, and zero otherwise.

161
00:06:26.735 --> 00:06:29.090
We can then take
our cars footprint in

162
00:06:29.090 --> 00:06:31.790
terms of the cells of
the occupancy grid,

163
00:06:31.790 --> 00:06:34.640
and sweep the footprint
out across each point in

164
00:06:34.640 --> 00:06:37.755
the spiral to generate
the swath of the path.

165
00:06:37.755 --> 00:06:40.160
If the occupancy grid
at a cell in

166
00:06:40.160 --> 00:06:42.680
the swath contains an obstacle,

167
00:06:42.680 --> 00:06:45.890
the path in question will
collide with the obstacle,

168
00:06:45.890 --> 00:06:48.160
and should be marked
as having a collision.

169
00:06:48.160 --> 00:06:50.180
If this never occurs for any of

170
00:06:50.180 --> 00:06:52.690
the cells in the swath
along the entire path,

171
00:06:52.690 --> 00:06:55.415
the path is considered
collision-free.

172
00:06:55.415 --> 00:06:58.940
Alternatively, we can
use circle checks if

173
00:06:58.940 --> 00:07:02.420
both the ego vehicle and
each obstacle in the ego lane,

174
00:07:02.420 --> 00:07:05.045
can be enclosed in
a circle approximation.

175
00:07:05.045 --> 00:07:07.040
Then we place the circles for

176
00:07:07.040 --> 00:07:09.860
the ego vehicle at
each point along the path,

177
00:07:09.860 --> 00:07:11.225
and check for collisions with

178
00:07:11.225 --> 00:07:14.255
each obstacle that falls
within the ego lane.

179
00:07:14.255 --> 00:07:17.000
To illustrate the results
of collision checking,

180
00:07:17.000 --> 00:07:18.680
we've added a parked vehicle to

181
00:07:18.680 --> 00:07:21.350
our path that we now
need to plan around.

182
00:07:21.350 --> 00:07:24.740
After sweeping the swath
out across each spiral,

183
00:07:24.740 --> 00:07:27.590
similar to how we did
it in module four,

184
00:07:27.590 --> 00:07:30.240
we have marked the
collision-free paths as green,

185
00:07:30.240 --> 00:07:33.665
and the paths that collide
with the obstacles as red.

186
00:07:33.665 --> 00:07:35.720
At this point, we have a set of

187
00:07:35.720 --> 00:07:37.790
feasible and
collision-free paths,

188
00:07:37.790 --> 00:07:41.000
but we need a method of selecting
the best one to follow.

189
00:07:41.000 --> 00:07:44.450
The selection process is
largely a design choice.

190
00:07:44.450 --> 00:07:46.790
As there may be
multiple criteria that

191
00:07:46.790 --> 00:07:49.430
are useful for a given
planning application.

192
00:07:49.430 --> 00:07:51.920
For example, we
may want to choose

193
00:07:51.920 --> 00:07:54.830
paths that are as far from
obstacles as possible.

194
00:07:54.830 --> 00:07:57.110
So we may add a penalty term for

195
00:07:57.110 --> 00:07:59.645
paths that come too
close to obstacles,

196
00:07:59.645 --> 00:08:01.340
in the occupancy grid.

197
00:08:01.340 --> 00:08:04.070
We may also want to
penalize terms that

198
00:08:04.070 --> 00:08:07.115
deviate too far from
the nearest lane center line,

199
00:08:07.115 --> 00:08:09.470
as we do not want
to split lanes for

200
00:08:09.470 --> 00:08:12.305
too long while performing
a lane change.

201
00:08:12.305 --> 00:08:15.530
For now, we're going to use
a simple metric where we

202
00:08:15.530 --> 00:08:19.010
bias the planner to select
paths from the path set,

203
00:08:19.010 --> 00:08:22.265
that are as close to the
center goal state as possible.

204
00:08:22.265 --> 00:08:24.230
The actual penalty
function doesn't

205
00:08:24.230 --> 00:08:26.570
matter as long as the
penalty increases,

206
00:08:26.570 --> 00:08:29.240
the farther you get
from the central goal.

207
00:08:29.240 --> 00:08:31.790
By biasing toward
the center path,

208
00:08:31.790 --> 00:08:33.320
we are encouraging our planner

209
00:08:33.320 --> 00:08:35.240
to follow the reference path,

210
00:08:35.240 --> 00:08:37.160
and only letting it deviate from

211
00:08:37.160 --> 00:08:40.160
the reference when the reference
path is infeasible,

212
00:08:40.160 --> 00:08:42.685
or if it collides
with an obstacle.

213
00:08:42.685 --> 00:08:45.080
For simplicity, we can take

214
00:08:45.080 --> 00:08:47.060
this function to be
the displacement from

215
00:08:47.060 --> 00:08:48.890
the center goal state to

216
00:08:48.890 --> 00:08:51.290
the goal state of
the path we are checking.

217
00:08:51.290 --> 00:08:54.580
We can then iterate over
every path in the path set,

218
00:08:54.580 --> 00:08:56.270
find the one that minimizes

219
00:08:56.270 --> 00:09:00.425
this penalty and select it to
publish as our final path.

220
00:09:00.425 --> 00:09:04.535
In our example, the selected
path is highlighted in blue.

221
00:09:04.535 --> 00:09:06.950
If we now repeat this process for

222
00:09:06.950 --> 00:09:10.190
multiple time steps as
the car moves along the path,

223
00:09:10.190 --> 00:09:12.005
our planner is able
to plan a path

224
00:09:12.005 --> 00:09:14.029
that converges to the goal state,

225
00:09:14.029 --> 00:09:16.715
while also avoiding
the obstacles.

226
00:09:16.715 --> 00:09:18.860
Similar to the reactive planner

227
00:09:18.860 --> 00:09:20.495
we developed in module four,

228
00:09:20.495 --> 00:09:22.130
this planner proceeds in

229
00:09:22.130 --> 00:09:23.825
a receding horizon fashion

230
00:09:23.825 --> 00:09:26.330
towards the goal at
the end of the lane.

231
00:09:26.330 --> 00:09:29.960
We now have all the pieces
necessary to form smooth,

232
00:09:29.960 --> 00:09:32.285
collision-free paths
through the environment,

233
00:09:32.285 --> 00:09:35.030
that favor forward
progress in the lane.

234
00:09:35.030 --> 00:09:37.415
To summarize in this video,

235
00:09:37.415 --> 00:09:38.600
we first define

236
00:09:38.600 --> 00:09:41.375
the conformal state
lattice planner approach,

237
00:09:41.375 --> 00:09:43.940
which selects points
laterally offset

238
00:09:43.940 --> 00:09:47.120
from some goal point ahead
of us along the road.

239
00:09:47.120 --> 00:09:49.460
We then planned paths to each of

240
00:09:49.460 --> 00:09:52.465
these points using
our spiral optimization methods,

241
00:09:52.465 --> 00:09:54.210
developed in lesson two.

242
00:09:54.210 --> 00:09:57.620
Next, we discussed how to
prune this set of paths to

243
00:09:57.620 --> 00:09:59.420
be collision-free,and how to

244
00:09:59.420 --> 00:10:01.710
select the best remaining path.

245
00:10:01.710 --> 00:10:05.045
Finally, we integrated
a receding horizon approach

246
00:10:05.045 --> 00:10:07.190
to complete our path planner.

247
00:10:07.190 --> 00:10:09.350
Now that you've
had an overview of

248
00:10:09.350 --> 00:10:11.600
the entire path
planning algorithm,

249
00:10:11.600 --> 00:10:13.580
we hope that you're
able to see how many of

250
00:10:13.580 --> 00:10:15.770
the lessons in this course
have culminated,

251
00:10:15.770 --> 00:10:17.329
in a method that efficiently

252
00:10:17.329 --> 00:10:19.160
solves the path planning problem.

253
00:10:19.160 --> 00:10:20.480
In our next video,

254
00:10:20.480 --> 00:10:21.740
we'll discuss how to take

255
00:10:21.740 --> 00:10:24.950
an input path as calculated
by our path planner,

256
00:10:24.950 --> 00:10:28.340
and generate a velocity profile
for the car to follow,

257
00:10:28.340 --> 00:10:30.050
as it moves along the path.

258
00:10:30.050 --> 00:10:31.700
We'll then have a complete set of

259
00:10:31.700 --> 00:10:34.745
reference signals to pass to
our controller to execute,

260
00:10:34.745 --> 00:10:36.920
completing all three stages of

261
00:10:36.920 --> 00:10:39.990
the hierarchical motion
planning process.